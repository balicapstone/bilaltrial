QA Tests ReadMeJenkins Builds:NightlyRegressionTests:* 508RegressionProduction.jaro PGOProductionNighltyo PGOReactQANightlyo PGOTeacherNightlyo PGOLoggingNightlyo LinkedAccountsNightly* Regression.jaro PGNProductionNightlyo PGNStagingNightlyo PGNLoggingNightlyo CIProductionNightlyo CIStagingNightlyCustom508ReactTests: For testing on PebbleGo React buildCustomRegressionTests: For testing on PGN and CI buildsPull508RegressionTests: Pulls from the Github Repo 508AutomatedTestsPullRegressionTests: Pulls from the Github Repo global-testsHow test are run in Jenkins:In the execute shell:	java -jar 508RegressionProduction.jar ${BUILD_TAG} Environment Browser SuiteInputs:	BUILD_TAG - created at runtime of jenkins build	Environment – environment you want tests to run in	Browser – browser you want tests to run in	Suite – Suite of tests you would like to runPebbleGo508SuiteRunner Suite Types:	ALL – Runs all UAT for student facing code and all API tests	STUDENT –  Runs all UAT for student facing code	TAKESCREENSHOTS – Takes screenshots for Visual Regression test suite	VISUALREGRESSION – Runs tests for visual regression for all student facing pages	LOGGING – Runs logging tests for PGO	AUTH – Runs Authentication API tests	LINKEDACCOUNTS – Runs linked account tests	API – Runs all API tests	TRIALFORM – Runs trial form tests	TEACHER – Runs all UAT for teacher facing pagesORIn the execute shell:	java -jar Regression.jar ${BUILD_TAG} Product Environment Browser SuiteInputs:	BUILD_TAG - created at runtime of jenkins build	Product – product (pgn, ci) you would like to run tests for	Environment – environment you want tests to run in	Browser – browser you want tests to run in	Suite – Suite of tests you would like to runRegressionSuiteRunner Suite Types:	PGN		ALL – Runs all PGN Tests		STUDENT – Runs all UAT for student facing pages		TEACHER – Runs all UAT for teacher facing pages		SMOKE – Runs the PGNSmokeTestSuite class		LOGGING – Runs the PGN Logging tests		GAMES – Runs the PGN Games tests	CI		ALL – Runs all CI Tests		STUDENT – Runs all UAT for Book Reader 		TEACHER – Runs all SuperAdmin tests for CI		SMOKE – Runs Book Reader tests		How Reports Are Collated and Sent:tar -czf ${BUILD_TAG}.tar.gz ${BUILD_TAG}In the Watcher.java class, the library uses the BUILD_TAG variable to create a local folder based on said variable. All screenshots taken are added to this folder using the test name for the name of the screenshot. The BUILD_TAG is also sent to the HTMLReportGenerator class and used to tell the report to be placed in the same folder. Post-build Actions:	Project Recipient List: Set this to who should receive tests	Attachments: ${BUILD_TAG}.tar.gz The compressed file as a result of the tests are sent to the email that is set on the Project Recipient List.Test ArchitecturePebbleGo508SuiteRunner.java:Takes the following input for test jar:* buildTag – if local, this will be set to string of environment + browser* environment* browser* suiteNote: All inputs must be in this sequential order.User.java:	Main class where chromedriver is created. When run on jenkins the user class pulls browser and environment variables from the PebbleGo508SuiteRunner class, when tests are run locally they are set in the user class in the functions setBrowser() and setEnvironment(). The user class also pulls a Watcher object from the PebbleGo508SuiteRunner class if it can, or if not it creates it’s own Watcher object.MakeNewDriver():      This function sets up the webdriver we will be running tests on. At this point it is only configured for chromedriver. We do a check for if we are running tests locally or on jenkins and choose from the following drivers:	chromedriver – This runs locally on any mac machine	chomedriver-linux – This chromedriver is needed to run tests on jenkins.	Both of these are located in the 508AutomatedTestsNote: When being upgraded or updated, all forms of WebDrivers to be used on the jenkins build must be linux based WebDriversThis class also sets WebDriver preferences for different types of functionality.The following code is needed for logging tests to have access to network logs:       DesiredCapabilities cap = DesiredCapabilities.chrome();       LoggingPreferences logPrefs = new LoggingPreferences();			       logPrefs.enable(LogType.PERFORMANCE, Level.INFO);       cap.setCapability(CapabilityType.LOGGING_PREFS, logPrefs);       The following line of code sets up the wait object that is used in all tests in the customwait() function:       wait = new WebDriverWait(pageDriver, 15);              UserInfo.java:	This class contains information for all users used in tests.Watcher.java:	This class is implemented in all tests and is overloaded to take screenshots on failures.		If the test suite is run locally, it is currently configured to run on Will’s local machine, so if you want screenshots of local tests being run, make sure to change this to where you would like local tests to save screenshots of failures.	This class is also where screenshots for visual regression tests are taken.Retry.java:	This overloads the Watcher class and reruns a test based on the number passed in. At the given moment all tests are run three times before the suite decided the test is a failure.BasePage.java: 	All selenium methods that are not in Page Object classes are in this class and all other Page Objects inherit these methods.LoggingTests:	Logging tests have been written under the assumption that they will run in order from this line of code:			@FixMethodOrder(MethodSorters.NAME_ASCENDING)	This ensures that when the server decides which test to run next from those in the file, we can ensure that they will run in an order that will make testing easiest. As is a session string is gleaned from the user the tests creates and stored until we test the logs. All tests that confirm functionality use the prefix “testBeforeTests_”, followed by the testBeforeTests_WAITFORDATA() function that makes sure that logs have time to be processed, finally we confirm these tests ran properly with the set of tests with the prefix “testResult” The test suite will write to the console which session strings it finds so that for debugging purposes.	This class also uses the CurlCallController.java class in the SharedClasses folder to get logging results from the curl calls hooked up to the Kibana instances.API Tests:	There are for main components to API Tests* APIControllers* DataClasses* GameData* TestsAll API tests run without needing to create WebDrivers, they are simply making HTTPGet and HTTPPost calls, scraping the data into the data classes, which are used to test the data in the test classes.General Test Guidelines:	@BeforeTest – Sets up the tests by navigating to the correct page/function	@AfterTest – Cleans up webdrivers after tests run	@Rule Testwatcher() – Since all tests restart differently, this tells tests how to do that      Retry(3) – Runs a failing test three times before designating it as a failure            Note: Order dictates how @Rule Testwatcher() and Retry(3) work together in their current implementation. @Rule Testwatcher() must be declared before Retry(3)                  Build Path Info:      External Jars:      Junit-4.12.jar – JUnit 4 instance, needed for tests      Selenium-server-standalone-3.10.0.jar – Needed to support Selenium WebDriver            Internal Jars:      JRE System Library – Whatever JDK is current on this machine      JUnit 4 – Tells tests which JUnit library to use      Maven Dependancies – Can be used to run tests as a Maven project in terminal            Selenium Sites            Truth is most of my debugging work is through google looking for the exact error or code library I am working with.      In terms of XPath’s for ids this webpage is helpful:      https://www.w3schools.com/xml/xpath_intro.asp      